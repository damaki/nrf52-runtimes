# This script takes the nRF52 runtimes generated by build-rts.py and
# patches them to turn them into an Alire crate.
#
# In particular it:
#  - adds an alire.toml
#  - patches runtime_build.gpr and ravenscar_build.gpr to add some style
#    switches to work around style warnings on Windows from the crate
#    configuration file generated by Alire.
#  - adds nrf52_runtime_config.ads which renames the crate config package
#    generated by Alire so that the common runtime sources can access the
#    config via one common package name.

import argparse
import pathlib
from typing import Dict


def patch_runtime_build_gpr(gpr_file: pathlib.Path, profile: str, target: str):
    """Patch the runtime_build.gpr file to add some style switches"""

    # Change "light-tasking" to "light_tasking"
    profile = profile.replace("-", "_")

    with open(gpr_file, "r") as f:
        content = f.read()

    # Add -gnaty-d to the switches used to build the runtime. This fixes style
    # warnings about line endings for packages which "with" the crate
    # configuration package generated by Alire, which uses CRLF line endings on
    # Windows.
    content = content.replace(
        f'for Default_Switches ("Ada") use Target_Options.ALL_ADAFLAGS',
        f'for Default_Switches ("Ada") use Target_Options.ALL_ADAFLAGS & ("-gnaty-d")',
    )

    with open(gpr_file, "w") as f:
        f.write(content)


def patch_ravenscar_build_gpr(gpr_file: pathlib.Path, profile: str, target: str):
    """Patch the ravenscar_build.gpr file to add some style switches"""

    # Change "light-tasking" to "light_tasking"
    profile = profile.replace("-", "_")

    with open(gpr_file, "r") as f:
        content = f.read()

    # Add -gnaty-d to the switches used to build the runtime. This fixes style
    # warnings about line endings for packages which "with" the crate
    # configuration package generated by Alire, which uses CRLF line endings on
    # Windows.
    content = content.replace(
        f'for Default_Switches ("Ada") use Target_Options.GNARL_ADAFLAGS',
        f'for Default_Switches ("Ada") use Target_Options.GNARL_ADAFLAGS & ("-gnaty-d")',
    )

    with open(gpr_file, "w") as f:
        f.write(content)


def gen_from_template(
    template_file: pathlib.Path,
    out_file: pathlib.Path,
    template_values: Dict[str, str],
):
    with open(template_file, "r") as f:
        content = f.read()

    for key, value in template_values.items():
        content = content.replace(f"$({key})", value)

    with open(out_file, "w", newline="\n") as f:
        f.write(content)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--runtime-dir", type=str, help="Path to the runtime directory to patch"
    )
    parser.add_argument(
        "--profile",
        type=str,
        choices=["light", "light-tasking", "embedded"],
        help="The runtime profile",
    )
    parser.add_argument(
        "--pretty-target",
        type=str,
        help="The pretty name of the target (e.g. nRF52840). Must not contain spaces",
    )
    parser.add_argument(
        "--version",
        type=str,
        default="14.0.0-dev",
        help="Version string to put in the alire.toml file"
    )

    args = parser.parse_args()

    runtime_dir = pathlib.Path(args.runtime_dir)
    profile = args.profile
    pretty_target = args.pretty_target
    target = pretty_target.lower().replace("-", "_")

    has_libgnarl = (runtime_dir / "ravenscar_build.gpr").exists()

    project_files = ["runtime_build.gpr"]
    if has_libgnarl:
        project_files.append("ravenscar_build.gpr")

    patch_runtime_build_gpr(
        gpr_file=runtime_dir / "runtime_build.gpr", profile=profile, target=target
    )

    if has_libgnarl:
        patch_ravenscar_build_gpr(
            gpr_file=runtime_dir / "ravenscar_build.gpr", profile=profile, target=target
        )

    template_values = {
        "profile": profile,
        "profile_underscored": profile.replace("-", "_"),
        "target": target,
        "pretty_target": pretty_target,
        "project_files_list": str(project_files),
        "version": args.version,
    }

    gen_from_template(
        template_file=pathlib.Path(__file__).parent / "alire.toml.in",
        out_file=runtime_dir / "alire.toml",
        template_values=template_values,
    )

    gen_from_template(
        template_file=pathlib.Path(__file__).parent / "nrf52_runtime_config.ads.in",
        out_file=runtime_dir / "gnat_user" / "nrf52_runtime_config.ads",
        template_values=template_values,
    )


if __name__ == "__main__":
    main()
